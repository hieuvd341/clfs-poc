#include "pipe_utils.h"
#include "windows_api.h"
#include "head.h"

std::vector<pipe_pair_t> g_pipe_pool;
const size_t POOL_INCREMENT = 0x1000;

int WriteDataToPipe(const pipe_pair_t* pipe_pair, const char* data, size_t bufsize)
{
    if (!pipe_pair || !data)
        return 0;

    DWORD resultLength = 0;

    return WriteFile(
        pipe_pair->write,
        data,
        bufsize,
        &resultLength,
        NULL);
}

int PeekDataFromPipe(const pipe_pair_t* pipe_pair, char* out, size_t bufsize)
{
    if (!pipe_pair || !out)
        return 0;

    DWORD resultLength = 0;

    return PeekNamedPipe(
        pipe_pair->read,
        out,
        bufsize,
        &resultLength,
        NULL,
        NULL);
}

int readDataFromPipe(const pipe_pair_t* pipe_pair, char* out, size_t bufsize)
{
    if (!pipe_pair || !out)
        return 0;

    DWORD resultLength = 0;

    return ReadFile(
        pipe_pair->read,
        out,
        bufsize,
        &resultLength,
        NULL);
}

int createPipePair(pipe_pair_t* pipe_pair)
{
    if (!pipe_pair)
        return 0;

    if (!CreatePipe(&pipe_pair->read, &pipe_pair->write, NULL, 0xFFFFFFFF))
    {
        fprintf(stderr, "[-] Failed to create pipe pair: %lu\n", GetLastError());
        return 0;
    }
    return 1;
}


void DestroyPipeGroup(pipe_group_t* pipe_group)
{
    for (size_t i = 0; i < pipe_group->nb; i++)
    {
        if (pipe_group->pipes[i].read && pipe_group->pipes[i].write)
        {
            ClosePipePairHandles(&pipe_group->pipes[i]);
        }
    }
    free(pipe_group);
}