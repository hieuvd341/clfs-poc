#pragma once
#ifndef HEAD_H
#define HEAD_H
#include <stdio.h> 
#include <stdlib.h> 
#include <string.h>
#include <windows.h>
#include <iostream>
#include <fstream>
#include <atlstr.h>
#include <cfapi.h>
#include <sddl.h>
#include <tlhelp32.h>
#include "ntos.h"
#pragma comment(lib, "CldApi.lib") 
#pragma comment(lib,"kernel32.lib")

#define CLFS_TAG 0x73666C43 // 'CLFS'
#define KTHREAD_PREVIOUS_MODE_OFFSET 0x232

typedef struct _SYSTEM_BIGPOOL_ENTRY {
	union {
		PVOID VirtualAddress;
		ULONG_PTR NonPaged : 1;
	};
	SIZE_T SizeInBytes;
	union {
		UCHAR Tag[4];
		ULONG TagUlong;
	};
} SYSTEM_BIGPOOL_ENTRY, * PSYSTEM_BIGPOOL_ENTRY;

typedef struct _SYSTEM_BIGPOOL_INFORMATION {
	ULONG Count;
	SYSTEM_BIGPOOL_ENTRY AllocatedInfo[10000];
} SYSTEM_BIGPOOL_INFORMATION, * PSYSTEM_BIGPOOL_INFORMATION;

struct pipe {
	HANDLE read_pipe;
	HANDLE write_pipe;
};
typedef struct pipe PIPE, * PPIPE;


// WNF stuff
typedef struct _WNF_STATE_NAME {
	ULONG Data[2];
} WNF_STATE_NAME, * PWNF_STATE_NAME;

typedef enum _WNF_STATE_NAME_LIFETIME {
	WnfWellKnownStateName,
	WnfPermanentStateName,
	WnfPersistentStateName,
	WnfTemporaryStateName
} WNF_STATE_NAME_LIFETIME;

typedef enum _WNF_DATA_SCOPE {
	WnfDataScopeSystem,
	WnfDataScopeSession,
	WnfDataScopeUser,
	WnfDataScopeProcess,
	WnfDataScopeMachine
} WNF_DATA_SCOPE;

typedef struct _WNF_TYPE_ID {
	GUID TypeId;
} WNF_TYPE_ID, * PWNF_TYPE_ID;

typedef const WNF_TYPE_ID* PCWNF_TYPE_ID;

typedef NTSTATUS(NTAPI* fpNtCreateWnfStateName)(
	_Out_ PWNF_STATE_NAME StateName,
	_In_ WNF_STATE_NAME_LIFETIME NameLifetime,
	_In_ WNF_DATA_SCOPE DataScope,
	_In_ BOOLEAN PersistData,
	_In_opt_ PCWNF_TYPE_ID TypeId,
	_In_ ULONG MaximumStateSize,
	_In_ PSECURITY_DESCRIPTOR SecurityDescriptor
	);

typedef ULONG WNF_CHANGE_STAMP, * PWNF_CHANGE_STAMP;

typedef NTSTATUS(NTAPI* fpNtUpdateWnfStateData)(
	_In_ PWNF_STATE_NAME StateName,
	_In_reads_bytes_opt_(Length) const VOID* Buffer,
	_In_opt_ ULONG Length,
	_In_opt_ PCWNF_TYPE_ID TypeId,
	_In_opt_ const PVOID ExplicitScope,
	_In_ WNF_CHANGE_STAMP MatchingChangeStamp,
	_In_ ULONG CheckStamp
	);

typedef NTSTATUS(NTAPI* fpNtQueryWnfStateData)(
	_In_ PWNF_STATE_NAME StateName,
	_In_opt_ PWNF_TYPE_ID TypeId,
	_In_opt_ const VOID* ExplicitScope,
	_Out_ PWNF_CHANGE_STAMP ChangeStamp,
	_Out_writes_bytes_to_opt_(*BufferSize, *BufferSize) PVOID Buffer,
	_Inout_ PULONG BufferSize
	);

typedef struct _WNF_STATE_NAME_REGISTRATION {
	PVOID64 MaxStateSize;
	PVOID64  TypeId;
	PVOID64 SecurityDescriptor;
} WNF_STATE_NAME_REGISTRATION, * PWNF_STATE_NAME_REGISTRATION;

typedef NTSTATUS(NTAPI* fpNtDeleteWnfStateData) (
	_In_ PWNF_STATE_NAME StateName,
	_In_opt_ const VOID* ExplicitScope
	);

typedef NTSTATUS(NTAPI* fpNtDeleteWnfStateName)(_In_ PWNF_STATE_NAME StateName);

#endif // HEAD_H