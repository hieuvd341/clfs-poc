import binascii

def calculate_crc32(input_file):
    """
    Reads a file containing hexadecimal numbers, calculates the CRC32 checksum
    using the polynomial 0x04C11DB7, prints the buffer length in hexadecimal,
    and displays the CRC32 checksum in both big-endian and little-endian formats.
    """
    try:
        # Read the input file
        with open(input_file, "r") as file:
            hex_data = file.read().strip()

        # Convert hex string to bytes
        hex_numbers = hex_data.split()
        byte_array = bytes(int(num, 16) for num in hex_numbers)

        # Calculate CRC32 using binascii
        crc32_checksum = binascii.crc32(byte_array) & 0xFFFFFFFF

        # Calculate buffer length in hexadecimal
        buffer_length = len(byte_array)

        # Convert checksum to little-endian hex sequence
        little_endian_hex = ' '.join(f"{b:02X}" for b in crc32_checksum.to_bytes(4, 'little'))

        # Print the results
        print(f"Buffer Length (hex): 0x{buffer_length:02X}")
        print(f"CRC32 Checksum (big-endian): 0x{crc32_checksum:08X}")
        print(f"CRC32 Checksum (little-endian as hex sequence): {little_endian_hex}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    input_file = "hex_numbers.txt"  
    calculate_crc32(input_file)